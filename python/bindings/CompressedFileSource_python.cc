/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(CompressedFileSource.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(4c23d59a3e4117a77fb1ad82503b3dee)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <compress/CompressedFileSource.h>
// pydoc.h is automatically generated in the build directory
#include <CompressedFileSource_pydoc.h>

void bind_CompressedFileSource(py::module& m)
{

    using CompressedFileSource    = ::gr::compress::CompressedFileSource;


    py::class_<CompressedFileSource, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<CompressedFileSource>>(m, "CompressedFileSource", D(CompressedFileSource))

        .def(py::init(&CompressedFileSource::make),
           py::arg("itemsize"),
           py::arg("filename"),
           py::arg("repeat") = false,
           D(CompressedFileSource,make)
        )
        




        
        .def("seek",&CompressedFileSource::seek,       
            py::arg("seek_point"),
            py::arg("whence"),
            D(CompressedFileSource,seek)
        )


        
        .def("open",&CompressedFileSource::open,       
            py::arg("filename"),
            py::arg("repeat"),
            D(CompressedFileSource,open)
        )


        
        .def("close",&CompressedFileSource::close,       
            D(CompressedFileSource,close)
        )


        
        .def("set_begin_tag",&CompressedFileSource::set_begin_tag,       
            py::arg("val"),
            D(CompressedFileSource,set_begin_tag)
        )

        ;




}








